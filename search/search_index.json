{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Mohammad's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li>Primary author: Mohammad Saatialsoruji</li> <li>Reviewer: Muhammad Fouly</li> </ul> <pre><code># This is an example of a code block\n# Code blocks are an essential part of project documentation\n# We will see these many times throughout the tutorial\nprint(\"We love COMP 423!\")\n</code></pre> <p>Success</p> <p>I have successfully set up admonitions for my partner! - Muhammad Fouly            You will see these throughout the tutorial for the purpose of side content without disturbing document flow :)</p>"},{"location":"tutorials/go-setup/#welcome","title":"Welcome","text":"<p>This tutorial will provide step-by-step instructions for creating a Development (Dev) container in Go, a programming language created by Google!</p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>To proceed with this tutorial, you will need to have the following: </p> <ol> <li>A GitHub account: sign up at GitHub.</li> <li>Git installed: Install from here.</li> <li>Visual Studio Code: Download and install from here.</li> <li>Docker installed: Get Docker here.</li> <li>Basic command-line knowledge</li> </ol> <p>Requirements</p> <p>For this tutorial, you do not need to install anything other than VSCode, Docker, and Git. You should not install Go! That is the role of the dev container! Remember that you want to minimize the things you have to manually download and install.</p>"},{"location":"tutorials/go-setup/#part-1-lets-start-with-the-project-setup","title":"Part 1. Let's Start With the Project Setup!","text":""},{"location":"tutorials/go-setup/#creating-a-local-directory-and-initializing-git","title":"Creating a Local Directory and Initializing Git","text":"<ul> <li>Open your terminal or command prompt. </li> <li>Create a new directory for you project by running: <pre><code>mkdir go-dev-container\ncd go-dev-container\n</code></pre></li> <li>Initialize a new Git repository: <pre><code>git init\n</code></pre></li> <li>Create a README file as follows: <pre><code>echo \"# Setting up a Dev Container for Go\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ul>"},{"location":"tutorials/go-setup/#creating-a-github-repository","title":"Creating a GitHub Repository","text":"<p>(A) Log in to GitHub and navigate to the Create a New Repository page.</p> <p>(B) Fill in the details as follows:</p> <ul> <li>Repository Name: <code>go-dev-container</code></li> <li>Description: \"Setting up a dev container for Go project.\"</li> <li>Visibility: Public</li> </ul> <p>(C) Do not initialize the repository with a README, .gitignore, or license.</p> <p>(D) Click Create Repository.</p>"},{"location":"tutorials/go-setup/#link-your-local-repository-to-github","title":"Link your Local Repository to GitHub","text":"<p>(A) Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-dev-container.git\n</code></pre> Replace <code>&lt;your-username&gt;</code> with your GitHub username.</p> <p>(B) Check your default branch name with the subcommand <code>git branch</code>. </p> <p>Note</p> <p>Old versions of git choose the name <code>master</code> for the primary branch, but these days <code>main</code> is the standard name. You should rename your default branch to main using the following command: <code>git branch -M main</code></p> <p>(C) Push your local commits to the GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></p> <p>Note</p> <p>The --set-upstream flag sets up the main branch to track the remote branch, meaning future pushes and pulls can be done without specifying the branch name and just writing git push origin when working on your local main branch. This long flag has a corresponding -u short flag.</p> <p>(D) Back in your web browser, refresh your GitHub repository to see that the same commit you made locally has now been pushed to remote. You can use git log locally to see the commit ID and message which should match the ID of the most recent commit on GitHub. This is the result of pushing your changes to your remote repository.</p>"},{"location":"tutorials/go-setup/#part-2-setting-up-the-development-environment","title":"Part 2. Setting Up the Development Environment","text":""},{"location":"tutorials/go-setup/#what-is-a-development-dev-container","title":"What is a Development (Dev) Container?","text":"<p>A dev container ensures that you are using the same development tools no matter which machine you are on. In essence, a dev container is a preconfigured environment defined by a set of files usually using Docker to create isolated, consistent setups for development. Think of it as another computer running on your computer which includes everything you need to work on a specific project. This can include the right programming language, tools, libraries, dependencies, etc.</p> <p>This is valuable because teams in the technology industry often work on complex projects that require a specific set of tools and dependencies. Without a dev container, each developer has to manually set up their environment on their machine. This could lead to errors, wasted time, and inconsistencies. However, with a dev container, everyone on the team works in an identical environment, reducing bugs caused by \"it works on my machine\" issues. Dev containers also simplify onboarding new team members and reduce wasted time since they can just start coding with a few lines of json in place.</p>"},{"location":"tutorials/go-setup/#how-are-software-project-dependencies-managed","title":"How are software project dependencies managed?","text":"<p>In most software projects, you will rely on external libraries to leverage work that has been done by others. Managing software dependencies is essential to ensure that your project has access to the correct versions of all of these libraries, avoiding compatibility issues. </p> <p>For Go, Go Modules manage dependencies. This system was introduced to standardize how external packages are fetched and versioned:</p> <ul> <li>go.mod: Lists your module\u2019s name and its direct dependencies.</li> <li>go.sum: Locks down the exact versions of your dependencies to ensure consistent builds across machines.</li> </ul> <p>We will see a simple example of dependency management in Go soon!</p>"},{"location":"tutorials/go-setup/#step-1-add-development-container-configuration","title":"Step 1. Add Development Container Configuration","text":"<ol> <li>In VS Code, open the <code>go-dev-container</code> directory. You can do this via: File &gt; Open Folder.<ul> <li>For more convenience, follow this short tutorial created by my partner!</li> </ul> </li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a <code>.devcontainer</code> directory in the root of your project with the following file inside of this \"hidden\" configuration directory: </li> </ol> <p><code>.devcontainer/devcontainer.json</code></p> <pre><code>{\n  \"name\": \"My Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\n        \"golang.Go\"\n      ]\n    }\n  },\n  \"postCreateCommand\": \"\"\n}\n</code></pre> <p>Note</p> <ul> <li><code>name</code>: A descriptive name for your container.</li> <li><code>image</code>: The Docker image we use. Microsoft maintains a variety of base images for popular languages, including Go.</li> <li><code>customizations</code>: Ensures that the recommended VS Code extensions (like the official Go extension) are installed for anyone who opens this project.</li> <li><code>postCreateCommand</code>: Commands to run right after the container is built. Since we only need a basic environment for \"Hello World,\" we can leave it empty for now.</li> </ul>"},{"location":"tutorials/go-setup/#step-2-reopen-the-project-in-a-vscode-dev-container","title":"Step 2: Reopen the Project in a VSCode Dev Container","text":"<p>To reopen the project in the container, press Ctrl+Shift+P (or Cmd+Shift+P on Mac) and search for Dev Containers: Reopen in Container, then select it. This may take a few minutes, don't worry!</p> <p>Once your dev container setup completes, close the current terminal tab and open a new terminal pane within VSCode. Run: <code>go version</code>. You should see your dev container running the latest version of Go. (As of January 2025, the latest stable Go version is go1.23.4)</p>"},{"location":"tutorials/go-setup/#part-3-developing-in-go","title":"Part 3. Developing in Go","text":""},{"location":"tutorials/go-setup/#creating-a-new-module","title":"Creating a New Module","text":"<p>As we mentioned, Go uses modules to manage dependencies and organize your code. To initialize a new module named <code>hello_world</code> for your project, follow these steps:</p> <p>(A) Create and switch to a new directory for your new module: <pre><code>mkdir hello_world\ncd hello_world\n</code></pre></p> <p>(B) Initalize your module: <pre><code>go mod init hello_world\n</code></pre> This creates a <code>go.mod</code> file in the hello_world directory. The file will look like this: <pre><code>module hello_world\n\ngo 1.xx\n</code></pre> <code>module hello_world</code> declares this directory as a module named <code>hello_world</code>.</p>"},{"location":"tutorials/go-setup/#compiling-and-running-your-program","title":"Compiling and Running Your Program","text":"<p>(A) Create a file named <code>main.go</code> in the <code>hello_world</code> directory: <pre><code>code main.go\n</code></pre></p> <p>Note</p> <p>The <code>code</code> command is not set up by default for VSCode. To set it up you can check out my colleague's tutorial here. Otherwise you can just manually do it in VSCode by right-clicking on the hello_world folder, creating a new file and naming it <code>main.go</code></p> <p>(B) Write your first program in Go! <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"HELLO COMP423\")\n}\n</code></pre></p> <p>(C) You can now compile your Go program:</p> <pre><code>go build \n</code></pre> <p>This command compiles your code and creates an executable in your directory. This is similar to C's <code>gcc [filename.c] -o [output_filename]</code> command that you used in COMP 211 to compile a program and get an executable object file. </p> <p>(D) Run the executable: <pre><code>./hello_world\n</code></pre></p> <p>Optional</p> <p>If you want to compile and run your Go program in one command, you can alternatively use <code>go run main.go</code>. </p> <p>You should now see: <pre><code>HELLO COMP423\n</code></pre></p> <p>Success</p> <p>You have built a development container for Go and successfully printed \"HELLO COMP423!\"</p>"},{"location":"tutorials/go-setup/#part-4-pushing-your-work-to-github","title":"Part 4. Pushing Your Work to GitHub","text":"<p>Now that you have your Go program running, all you need to do is push your new dev container project to GitHub! Use the following commands: <pre><code>git add .\ngit commit -m \"Successfully printed HELLO COMP423 with my own Go dev container\"\ngit push\n</code></pre></p>"},{"location":"tutorials/go-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have successfully completed this tutorial for setting up a dev container for Go and learned some foundational skills!</p>"},{"location":"tutorials/go-setup/#references","title":"References","text":"<ol> <li>This tutorial is heavily inspired by Professor Kris Jordan\u2019s tutorial: Starting a Static Website Project with MkDocs</li> <li>Go documentation</li> <li>MkDocs Material Documentation</li> </ol>"}]}